1. Requirements are not really about requirements

2. If we must build software, then it must be optimally valuable for its
owner

3. If your software does not have to satisfy a need, then you can build
anything. However, if it is meant to satisfy a need, then you have to
know what that need is to build the right software

4. There is an important difference between building a piece of software
and solving a business problem. The former does not necessarily
accomplish the latter

5. The requirements do not have to be written, but they have to become
known to the builders

6. Your customer won’t always give you the right answer. Sometimes it is
impossible for the customer to know what is right, and sometimes he just
doesn’t know what he needs

7. Requirements do not come about by chance. There needs to be some
kind of orderly process for developing them

8. You can be as iterative as you want, but you still need to understand
what the business needs

9. There is no silver bullet. All our methods and tools will not compensate
for poor thought and poor workmanship

10. Requirements, if they are to be implemented successfully, must be
measurable and testable

11. You, the business analyst, will change the way the user thinks about his
problem, either now or later

Requirements are:
	Discovered
	Valuable
	Indispensable
	Hard to discover
	Measurable


Modelo cascada:
	Comunicación
	Planeación
	Modelado
	Construcción
	Despliegue


Requisito:
	Condición o capacidad que un usuario necesita para poder resolver un problema o lograr un objetivo (IEEE)
	Condición o capacidad que debe ser corroborada por el sistema
	Algo que el sistema debe hacer o una cualidad que debe poseer

SMART
Specific: Bien definido
Measurable: Se puede medir
Achievable: Realista
Relevant: Relevante
Traceable: Con límite de tiempo

